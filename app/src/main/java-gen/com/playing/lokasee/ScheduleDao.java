package com.playing.lokasee;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.playing.lokasee.Schedule;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SCHEDULE.
*/
public class ScheduleDao extends AbstractDao<Schedule, Long> {

    public static final String TABLENAME = "SCHEDULE";

    /**
     * Properties of entity Schedule.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Schedule_id = new Property(1, Integer.class, "schedule_id", false, "SCHEDULE_ID");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Start_time = new Property(3, String.class, "start_time", false, "START_TIME");
        public final static Property Finish_time = new Property(4, String.class, "finish_time", false, "FINISH_TIME");
        public final static Property Location_id = new Property(5, Integer.class, "location_id", false, "LOCATION_ID");
        public final static Property Event_id = new Property(6, long.class, "event_id", false, "EVENT_ID");
    };

    private DaoSession daoSession;

    private Query<Schedule> event_SchedulesQuery;

    public ScheduleDao(DaoConfig config) {
        super(config);
    }
    
    public ScheduleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SCHEDULE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SCHEDULE_ID' INTEGER," + // 1: schedule_id
                "'DATE' TEXT," + // 2: date
                "'START_TIME' TEXT," + // 3: start_time
                "'FINISH_TIME' TEXT," + // 4: finish_time
                "'LOCATION_ID' INTEGER," + // 5: location_id
                "'EVENT_ID' INTEGER NOT NULL );"); // 6: event_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SCHEDULE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Schedule entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer schedule_id = entity.getSchedule_id();
        if (schedule_id != null) {
            stmt.bindLong(2, schedule_id);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        String start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindString(4, start_time);
        }
 
        String finish_time = entity.getFinish_time();
        if (finish_time != null) {
            stmt.bindString(5, finish_time);
        }
 
        Integer location_id = entity.getLocation_id();
        if (location_id != null) {
            stmt.bindLong(6, location_id);
        }
        stmt.bindLong(7, entity.getEvent_id());
    }

    @Override
    protected void attachEntity(Schedule entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Schedule readEntity(Cursor cursor, int offset) {
        Schedule entity = new Schedule( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // schedule_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // start_time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // finish_time
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // location_id
            cursor.getLong(offset + 6) // event_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Schedule entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSchedule_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStart_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFinish_time(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocation_id(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setEvent_id(cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Schedule entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Schedule entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "schedules" to-many relationship of Event. */
    public List<Schedule> _queryEvent_Schedules(long event_id) {
        synchronized (this) {
            if (event_SchedulesQuery == null) {
                QueryBuilder<Schedule> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Event_id.eq(null));
                event_SchedulesQuery = queryBuilder.build();
            }
        }
        Query<Schedule> query = event_SchedulesQuery.forCurrentThread();
        query.setParameter(0, event_id);
        return query.list();
    }

}
