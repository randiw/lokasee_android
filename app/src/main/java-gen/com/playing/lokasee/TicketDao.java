package com.playing.lokasee;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.playing.lokasee.Ticket;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TICKET.
*/
public class TicketDao extends AbstractDao<Ticket, Long> {

    public static final String TABLENAME = "TICKET";

    /**
     * Properties of entity Ticket.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ticket_id = new Property(1, Integer.class, "ticket_id", false, "TICKET_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Seatplan = new Property(4, String.class, "seatplan", false, "SEATPLAN");
        public final static Property Type = new Property(5, String.class, "type", false, "TYPE");
        public final static Property Price = new Property(6, Long.class, "price", false, "PRICE");
        public final static Property Stock = new Property(7, Integer.class, "stock", false, "STOCK");
        public final static Property Schedule_id = new Property(8, long.class, "schedule_id", false, "SCHEDULE_ID");
    };

    private Query<Ticket> schedule_TicketsQuery;

    public TicketDao(DaoConfig config) {
        super(config);
    }
    
    public TicketDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TICKET' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TICKET_ID' INTEGER," + // 1: ticket_id
                "'NAME' TEXT," + // 2: name
                "'DESCRIPTION' TEXT," + // 3: description
                "'SEATPLAN' TEXT," + // 4: seatplan
                "'TYPE' TEXT," + // 5: type
                "'PRICE' INTEGER," + // 6: price
                "'STOCK' INTEGER," + // 7: stock
                "'SCHEDULE_ID' INTEGER NOT NULL );"); // 8: schedule_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TICKET'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Ticket entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer ticket_id = entity.getTicket_id();
        if (ticket_id != null) {
            stmt.bindLong(2, ticket_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String seatplan = entity.getSeatplan();
        if (seatplan != null) {
            stmt.bindString(5, seatplan);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(6, type);
        }
 
        Long price = entity.getPrice();
        if (price != null) {
            stmt.bindLong(7, price);
        }
 
        Integer stock = entity.getStock();
        if (stock != null) {
            stmt.bindLong(8, stock);
        }
        stmt.bindLong(9, entity.getSchedule_id());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Ticket readEntity(Cursor cursor, int offset) {
        Ticket entity = new Ticket( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ticket_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // seatplan
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // price
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // stock
            cursor.getLong(offset + 8) // schedule_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Ticket entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTicket_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSeatplan(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrice(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setStock(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSchedule_id(cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Ticket entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Ticket entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "tickets" to-many relationship of Schedule. */
    public List<Ticket> _querySchedule_Tickets(long schedule_id) {
        synchronized (this) {
            if (schedule_TicketsQuery == null) {
                QueryBuilder<Ticket> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Schedule_id.eq(null));
                schedule_TicketsQuery = queryBuilder.build();
            }
        }
        Query<Ticket> query = schedule_TicketsQuery.forCurrentThread();
        query.setParameter(0, schedule_id);
        return query.list();
    }

}
